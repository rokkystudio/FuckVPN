package fuck.system.vpn.status

import android.app.Activity
import android.content.*
import android.net.VpnService
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.preference.PreferenceManager
import android.util.Log
import android.view.View
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.content.ContextCompat
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import com.google.android.material.button.MaterialButton
import de.blinkt.openvpn.VpnProfile
import de.blinkt.openvpn.VpnProfile.EXTRA_PROFILEUUID
import de.blinkt.openvpn.VpnProfile.EXTRA_PROFILE_VERSION
import de.blinkt.openvpn.core.ConfigParser
import de.blinkt.openvpn.core.OpenVPNService
import de.blinkt.openvpn.core.ProfileManager
import fuck.system.vpn.R
import fuck.system.vpn.servers.server.ServerGeo
import fuck.system.vpn.servers.server.ServerItem
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import java.io.StringReader
import java.util.UUID

/**
 * –§—Ä–∞–≥–º–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:
 * - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
 * - –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è
 * - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN
 * - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π ping (RTT), –æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */
class StatusFragment : Fragment(R.layout.fragment_status)
{
    /** –°–µ—Ä–≤–µ—Ä, –æ–∂–∏–¥–∞—é—â–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ */
    private var pendingServer: ServerItem? = null

    /** –¢–µ–∫—É—â–∏–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Å–µ—Ä–≤–µ—Ä */
    private var currentServer: ServerItem? = null

    /** –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */
    private lateinit var textCountry: TextView
    private lateinit var textIp: TextView
    private lateinit var textPort: TextView
    private lateinit var textPing: TextView
    private lateinit var textProto: TextView
    private lateinit var imageFlag: ImageView
    private lateinit var buttonAction: MaterialButton
    private lateinit var mapView: MapView

    /** Launcher –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ VPN */
    private lateinit var vpnPermissionLauncher: ActivityResultLauncher<Intent>

    /** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ */
    private var pingUpdateHandler: Handler? = null

    private val pingUpdateRunnable = object : Runnable {
        override fun run() {
            if (isVpnConnected()) {
                val ping = OpenVPNService.currentPing
                textPing.text = if (ping > 0) "${'$'}{ping}ms" else "-"
                pingUpdateHandler?.postDelayed(this, 1000)
            } else {
                textPing.text = "-"
            }
        }
    }

    private val vpnDisconnectedReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            context?.let {
                pendingServer?.let { server ->
                    realStartVpn(server)
                    pendingServer = null
                }
            }
        }
    }

    private val vpnStatusReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            mapView.update()
            updateVpnStatus()
        }
    }

    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç UI, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç VPN-—Å–æ–±—ã—Ç–∏—è –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
     */
    override fun onViewCreated(view: View, savedInstanceState: Bundle?)
    {
        super.onViewCreated(view, savedInstanceState)

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
        textCountry = view.findViewById(R.id.StatusCountry)
        textIp = view.findViewById(R.id.StatusIp)
        textPort = view.findViewById(R.id.StatusPort)
        textPing = view.findViewById(R.id.StatusPing)
        textProto = view.findViewById(R.id.StatusProto)
        imageFlag = view.findViewById(R.id.StatusFlag)
        buttonAction = view.findViewById(R.id.StatusConnectDisconnect)
        mapView = view.findViewById(R.id.StatusMapView)
        mapView.update()

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è BroadcastReceiver'–æ–≤
        ContextCompat.registerReceiver(
            requireContext(),
            vpnDisconnectedReceiver,
            IntentFilter("de.blinkt.openvpn.DISCONNECTED"),
            ContextCompat.RECEIVER_NOT_EXPORTED
        )
        ContextCompat.registerReceiver(
            requireContext(),
            vpnStatusReceiver,
            IntentFilter("de.blinkt.openvpn.VPN_STATUS"),
            ContextCompat.RECEIVER_NOT_EXPORTED
        )

        // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ VPN —á–µ—Ä–µ–∑ launcher
        vpnPermissionLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                pendingServer?.let {
                    realStartVpn(it)
                    pendingServer = null
                }
            } else {
                Toast.makeText(requireContext(), "VPN permission denied", Toast.LENGTH_SHORT).show()
                pendingServer = null
            }
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        buttonAction.setOnClickListener {
            currentServer?.let { server ->
                if (isVpnConnected()) stopVpn() else startVpn(server)
            }
        }
    }

    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω.
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∏–Ω–≥.
     */
    override fun onResume()
    {
        super.onResume()

        val server = LastServerStorage.load(requireContext())
        if (server == null) {
            clearViews()
            return
        }

        currentServer = server
        fillViews(server)

        if (LastServerStorage.getAutoConnect(requireContext())) {
            LastServerStorage.setAutoConnect(requireContext(), false)
            startVpn(server)
        }

        updateVpnStatus()

        pingUpdateHandler = Handler(Looper.getMainLooper())
        pingUpdateHandler?.post(pingUpdateRunnable)
    }

    /**
     * –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ —É—Ö–æ–¥–µ —Å —ç–∫—Ä–∞–Ω–∞.
     */
    override fun onPause() {
        super.onPause()
        pingUpdateHandler?.removeCallbacks(pingUpdateRunnable)
        pingUpdateHandler = null
    }

    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
     */
    override fun onDestroyView() {
        super.onDestroyView()
        mapView.clear()
        requireContext().unregisterReceiver(vpnDisconnectedReceiver)
        requireContext().unregisterReceiver(vpnStatusReceiver)
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç VPN.
     * –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
     */
    fun startVpn(server: ServerItem) {
        LastServerStorage.save(requireContext(), server)
        pendingServer = server

        val intent = VpnService.prepare(requireContext())
        if (intent != null) {
            vpnPermissionLauncher.launch(intent)
        } else {
            realStartVpn(server)
            pendingServer = null
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ VPN.
     */
    fun stopVpn() {
        val stopIntent = Intent(requireContext(), OpenVPNService::class.java)
        stopIntent.action = OpenVPNService.DISCONNECT_VPN
        requireContext().applicationContext.startService(stopIntent)
    }

    /**
     * –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É,
     * –∏–º–ø–æ—Ä—Ç–∏—Ä—É—è –ø—Ä–æ—Ñ–∏–ª—å –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenVPNService.
     */
    private fun realStartVpn(server: ServerItem)
    {
        val context = requireContext().applicationContext
        Log.e("VPN", "üöÄ –ù–∞—á–∞–ª–æ realStartVpn –¥–ª—è ${server.name}")

        val profile = importProfileFromOvpn(server)
        if (profile == null) {
            Log.e("VPN", "‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è: null")
            Toast.makeText(context, "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ VPN‚Äë–ø—Ä–æ—Ñ–∏–ª—è", Toast.LENGTH_SHORT).show()
            return
        }

        Log.e("VPN", "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${profile.name}, UUID: ${profile.uuidString}")

        cleanOldProfiles(context)
        Log.e("VPN", "üßπ –°—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")

        val manager = ProfileManager.getInstance(context)
        manager.addProfile(profile)
        Log.e("VPN", "üìå –ü—Ä–æ—Ñ–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä")

        ProfileManager.saveProfile(context, profile)
        Log.e("VPN", "üíæ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

        Log.e("VPN", "üìÇ filesDir –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${context.filesDir.absolutePath}")

        ProfileManager.setConnectedVpnProfile(context, profile)
        Log.e("VPN", "üîó –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: ${profile.uuidString}")

        manager.saveProfileList(context) // üîß <-- –≠–¢–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!

        // üîß –§–æ—Ä—Å–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ —Å—Ä–∞–∑—É –≤ –Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        val prefs = context.getSharedPreferences("de.blinkt.openvpn_preferences", Context.MODE_PRIVATE)
        prefs.edit().putString("lastConnectedProfile", profile.uuidString).commit()

        // üü° –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        manager.refreshVPNList(context)
        Log.e("VPN", "üîÑ VPN —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω. –í—Å–µ–≥–æ: ${manager.profiles.size}")

        val confirm = ProfileManager.get(context, profile.uuidString, profile.mVersion, 20)
        if (confirm == null) {
            Log.e("VPN", "‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —É–¥–∞–ª–æ—Å—å. UUID: ${profile.uuidString}")
            Toast.makeText(context, "VPN‚Äë–ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", Toast.LENGTH_SHORT).show()
            return
        }

        Log.e("VPN", "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: ${confirm.name}, UUID: ${confirm.uuidString}, –≤–µ—Ä—Å–∏—è: ${confirm.mVersion}")

        val intent = profile.getStartServiceIntent(context, "manual", true).apply {
            putExtra(EXTRA_PROFILEUUID, profile.uuidString)
            putExtra(EXTRA_PROFILE_VERSION, profile.mVersion)
        }
        ContextCompat.startForegroundService(context, intent)
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç VPN-–ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .ovpn.
     */
    private fun importProfileFromOvpn(server: ServerItem): VpnProfile? {
        return try {
            val cp = ConfigParser()
            cp.parseConfig(StringReader(server.ovpn)) // –ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç

            // ‚úÖ —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å, –∑–∞–¥–∞—ë–º –∏–º—è –∏ UUID
            cp.convertProfile().apply {
                mName = server.name
                setUUID(UUID.randomUUID())
            }
        } catch (e: Exception) {
            e.printStackTrace()
            null
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ VPN-–ø—Ä–æ—Ñ–∏–ª–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.
     */
    private fun cleanOldProfiles(context: Context) {
        val manager = ProfileManager.getInstance(context)
        val allProfiles = manager.profiles.toList()
        allProfiles.forEach { manager.removeProfile(context, it) }
    }

    /**
     * –ó–∞–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–µ–∫—É—â–µ–º —Å–µ—Ä–≤–µ—Ä–µ.
     */
    private fun fillViews(server: ServerItem) {
        textCountry.text = ServerGeo.getCountry(server.country)
        textIp.text = server.ip
        textPort.text = ":" + (server.port?.toString() ?: "-")
        textProto.text = server.proto
        textPing.text = server.ping?.toString() ?: "-"
        imageFlag.setImageResource(ServerGeo.getFlag(server.country))
        buttonAction.isEnabled = true
    }

    /**
     * –û—á–∏—â–∞–µ—Ç UI –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω.
     */
    private fun clearViews() {
        textCountry.text = ""
        textIp.text = ""
        textPort.text = ""
        textProto.text = ""
        textPing.text = ""
        imageFlag.setImageDrawable(null)
        buttonAction.text = getString(R.string.connect)
        buttonAction.isEnabled = false
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–¥–ø–∏—Å—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è VPN.
     */
    private fun updateVpnStatus()
    {
        if (isVpnConnected()) {
            buttonAction.text = getString(R.string.disconnect)
        } else {
            buttonAction.text = getString(R.string.connect)
        }

        buttonAction.isEnabled = currentServer != null
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenVPNService.
     */
    private fun isVpnConnected(): Boolean = OpenVPNService.isConnected()
}
